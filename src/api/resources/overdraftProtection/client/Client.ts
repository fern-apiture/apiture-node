/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ApitureBanking from "../../..";
import URLSearchParams from "@ungap/url-search-params";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace OverdraftProtection {
    interface Options {
        environment?: environments.ApitureBankingEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class OverdraftProtection {
    constructor(protected readonly options: OverdraftProtection.Options) {}

    /**
     * Return a paginated list of a customer's accounts that are eligible to serve as overdraft protection accounts for the given account. An overdraft protection account is a deposit account that the financial institution can transfer funds from to prevent the account balance from going negative and incurring non-sufficient funds fees.
     *
     * The user must have the `allows.manageOverdraftAccounts` permission on the account to use this operation.
     *
     * To obtain available balances for these accounts, use [`listAccountBalances`](#op-listAccountBalances).
     * @throws {@link ApitureBanking.BadRequestError}
     * @throws {@link ApitureBanking.UnauthorizedError}
     * @throws {@link ApitureBanking.ForbiddenError}
     * @throws {@link ApitureBanking.NotFoundError}
     * @throws {@link ApitureBanking.UnprocessableEntityError}
     */
    public async listEligibleOverdraftAccounts(
        accountId: ApitureBanking.ResourceId,
        request: ApitureBanking.OverdraftProtectionListEligibleOverdraftAccountsRequest = {}
    ): Promise<ApitureBanking.EligibleOverdraftAccounts> {
        const { start, limit } = request;
        const _queryParams = new URLSearchParams();
        if (start != null) {
            _queryParams.append("start", start);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.ApitureBankingEnvironment.Default,
                `accounts/${await serializers.ResourceId.jsonOrThrow(accountId)}/eligibleOverdraftAccounts`
            ),
            method: "GET",
            headers: {
                "API-Key": await core.Supplier.get(this.options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/apiture",
                "X-Fern-SDK-Version": "0.0.6",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.EligibleOverdraftAccounts.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ApitureBanking.BadRequestError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new ApitureBanking.UnauthorizedError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new ApitureBanking.ForbiddenError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new ApitureBanking.NotFoundError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new ApitureBanking.UnprocessableEntityError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.ApitureBankingError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ApitureBankingError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ApitureBankingTimeoutError();
            case "unknown":
                throw new errors.ApitureBankingError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Return the JSON representation of this account's overdraft protection settings.
     * @throws {@link ApitureBanking.UnauthorizedError}
     * @throws {@link ApitureBanking.ForbiddenError}
     * @throws {@link ApitureBanking.NotFoundError}
     */
    public async getOverdraftProtection(
        accountId: ApitureBanking.ResourceId
    ): Promise<ApitureBanking.OverdraftProtection> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.ApitureBankingEnvironment.Default,
                `accounts/${await serializers.ResourceId.jsonOrThrow(accountId)}/overdraftProtection`
            ),
            method: "GET",
            headers: {
                "API-Key": await core.Supplier.get(this.options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/apiture",
                "X-Fern-SDK-Version": "0.0.6",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.OverdraftProtection.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new ApitureBanking.UnauthorizedError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new ApitureBanking.ForbiddenError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new ApitureBanking.NotFoundError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.ApitureBankingError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ApitureBankingError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ApitureBankingTimeoutError();
            case "unknown":
                throw new errors.ApitureBankingError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Perform a partial update of the overdraft accounts. Only fields in the request body are updated on the resource; fields which are omitted are not updated. To add, replace, or remove an overdraft account, add, replace, or remove the corresponding account item from the `items` array. Only the account `id` in the items is significant.
     *
     * The user must have the `allows.manageOverdraftAccounts` permission on the account to use this operation.
     * @throws {@link ApitureBanking.BadRequestError}
     * @throws {@link ApitureBanking.UnauthorizedError}
     * @throws {@link ApitureBanking.ForbiddenError}
     * @throws {@link ApitureBanking.NotFoundError}
     * @throws {@link ApitureBanking.UnprocessableEntityError}
     */
    public async patchOverdraftAccounts(
        accountId: ApitureBanking.ResourceId,
        request: ApitureBanking.OverdraftProtectionPatch = {}
    ): Promise<ApitureBanking.OverdraftProtection> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.ApitureBankingEnvironment.Default,
                `accounts/${await serializers.ResourceId.jsonOrThrow(accountId)}/overdraftProtection`
            ),
            method: "PATCH",
            headers: {
                "API-Key": await core.Supplier.get(this.options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/apiture",
                "X-Fern-SDK-Version": "0.0.6",
            },
            contentType: "application/json",
            body: await serializers.OverdraftProtectionPatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.OverdraftProtection.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ApitureBanking.BadRequestError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new ApitureBanking.UnauthorizedError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new ApitureBanking.ForbiddenError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new ApitureBanking.NotFoundError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new ApitureBanking.UnprocessableEntityError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.ApitureBankingError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ApitureBankingError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ApitureBankingTimeoutError();
            case "unknown":
                throw new errors.ApitureBankingError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
