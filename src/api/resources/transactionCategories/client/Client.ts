/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ApitureBanking from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace TransactionCategories {
    interface Options {
        environment?: environments.ApitureBankingEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class TransactionCategories {
    constructor(protected readonly options: TransactionCategories.Options) {}

    /**
     * Return a collection of transaction categories. The response is limited to 1,000 categories.
     *
     * This is a _conditional operation_ when the `If-None-Match` header is used. If the client has a `transactionCategories` response and the `ETag` returned from a previous call, this operation returns a 304 Not Modified if called again when the categories collection has not changed.
     * @throws {@link ApitureBanking.BadRequestError}
     * @throws {@link ApitureBanking.UnauthorizedError}
     * @throws {@link ApitureBanking.ForbiddenError}
     * @throws {@link ApitureBanking.UnprocessableEntityError}
     */
    public async listTransactionCategories(
        request: ApitureBanking.TransactionCategoriesListTransactionCategoriesRequest = {}
    ): Promise<ApitureBanking.TransactionCategories> {
        const { ifNoneMatch } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.ApitureBankingEnvironment.Default,
                "transactionCategories"
            ),
            method: "GET",
            headers: {
                "API-Key": await core.Supplier.get(this.options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/apiture",
                "X-Fern-SDK-Version": "0.0.6",
                "If-None-Match": ifNoneMatch != null ? ifNoneMatch : undefined,
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.TransactionCategories.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ApitureBanking.BadRequestError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new ApitureBanking.UnauthorizedError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new ApitureBanking.ForbiddenError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new ApitureBanking.UnprocessableEntityError(
                        await serializers.ProblemResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.ApitureBankingError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ApitureBankingError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ApitureBankingTimeoutError();
            case "unknown":
                throw new errors.ApitureBankingError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
