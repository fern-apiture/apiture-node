/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as ApitureBanking from "../../api";
import * as core from "../../core";

export const TransferItem: core.serialization.ObjectSchema<serializers.TransferItem.Raw, ApitureBanking.TransferItem> =
    core.serialization
        .object({
            id: core.serialization.lazy(async () => (await import("..")).ReadOnlyResourceId),
            schedule: core.serialization.lazyObject(async () => (await import("..")).TransferItemSchedule),
            state: core.serialization.lazy(async () => (await import("..")).TransferState),
            processedAt: core.serialization.string().optional(),
            updatedBy: core.serialization.string().optional(),
        })
        .extend(core.serialization.lazyObject(async () => (await import("..")).TransferFields))
        .extend(core.serialization.lazyObject(async () => (await import("..")).TimestampFields));

export declare namespace TransferItem {
    interface Raw extends serializers.TransferFields.Raw, serializers.TimestampFields.Raw {
        id: serializers.ReadOnlyResourceId.Raw;
        schedule: serializers.TransferItemSchedule.Raw;
        state: serializers.TransferState.Raw;
        processedAt?: string | null;
        updatedBy?: string | null;
    }
}
