/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as ApitureBanking from "../../api";
import * as core from "../../core";

export const ApiProblem: core.serialization.ObjectSchema<serializers.ApiProblem.Raw, ApitureBanking.ApiProblem> =
    core.serialization.object({
        type: core.serialization.string().optional(),
        title: core.serialization.string().optional(),
        status: core.serialization.number().optional(),
        detail: core.serialization.string().optional(),
        instance: core.serialization.string().optional(),
        id: core.serialization.lazy(async () => (await import("..")).ReadOnlyResourceId).optional(),
        occurredAt: core.serialization.lazy(async () => (await import("..")).ReadOnlyTimestamp).optional(),
        problems: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("..")).ApiProblem))
            .optional(),
        attributes: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    });

export declare namespace ApiProblem {
    interface Raw {
        type?: string | null;
        title?: string | null;
        status?: number | null;
        detail?: string | null;
        instance?: string | null;
        id?: serializers.ReadOnlyResourceId.Raw | null;
        occurredAt?: serializers.ReadOnlyTimestamp.Raw | null;
        problems?: serializers.ApiProblem.Raw[] | null;
        attributes?: Record<string, unknown> | null;
    }
}
